<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 扫描@Controller注解 -->
	<context:component-scan base-package="com.pwd.mavenTest">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>


	<!-- 数据库配置文件位置 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	<bean id="basicDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close" abstract="true">
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<!-- 连接池最大使用连接数 -->
		<property name="maxActive">
			<value>${jdbc.maxActive}</value>
		</property>
		<!-- 初始化连接大小 -->
		<property name="initialSize">
			<value>${jdbc.initialSize}</value>
		</property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait">
			<value>${jdbc.maxWait}</value>
		</property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle">
			<value>${jdbc.minIdle}</value>
		</property>
		<!-- 自动清除无用连接 -->
		<property name="removeAbandoned">
			<value>${jdbc.removeAbandoned}</value>
		</property>
		<!-- 清除无用连接的等待时间 -->
		<property name="removeAbandonedTimeout">
			<value>${jdbc.removeAbandonedTimeout}</value>
		</property>
		<!-- 配置间隔多久才进行一次检测 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>${jdbc.timeBetweenEvictionRunsMillis}</value>
		</property>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis">
			<value>${jdbc.minEvictableIdleTimeMillis}</value>
		</property>
		<!-- 用来检测连接是否有效的sql -->
		<property name="validationQuery">
			<value>${jdbc.validationQuery}</value>
		</property>
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle">
			<value>${jdbc.testWhileIdle}</value>
		</property>
		<property name="testOnBorrow">
			<value>${jdbc.testOnBorrow}</value>
		</property>
		<property name="testOnReturn">
			<value>${jdbc.testOnReturn}</value>
		</property>
		<!-- 连接属性 -->
		<property name="connectionProperties">
			<value>${jdbc.connectionProperties}</value>
		</property>
		<property name="poolPreparedStatements">
			<value>${jdbc.poolPreparedStatements}</value>
		</property>
		<property name="maxPoolPreparedStatementPerConnectionSize">
			<value>${jdbc.maxPoolPreparedStatementPerConnectionSize}</value>
		</property>
		<!-- 通过别名的方式配置扩展插件 -->
		<property name="filters">
			<value>${jdbc.filters}</value>
		</property>
	</bean>

	<!-- dataSource -->
	<bean id="dataSource" parent="basicDataSource">
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
	</bean>



	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
		<property name="mapperLocations" value="classpath:mapper/*/*Mapper.xml"></property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.pwd.mavenTest.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>